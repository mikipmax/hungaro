/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hungaro;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import javax.swing.JTextField;
import munkres.JCTextField;
import munkres.munkres;

/**
 *
 * @author Mickmaxy
 */
public class vst_hungaro extends javax.swing.JFrame {

    /**
     * Creates new form vst_hungaro
     */
    public vst_hungaro() {
        initComponents();
        setLocationRelativeTo(null);
    }
    public static int fil;
    public static int col;
    public static JTextField[][] matriz;
    public static JTextField[][] matrizT;
    public static double oferta[];
    public static double demanda[];

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        txt_n1 = new javax.swing.JTextField();
        txt_n2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btn_genM = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnl_matriz = new javax.swing.JPanel();
        btn_calc = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txa_proceso = new javax.swing.JTextArea();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        txt_t1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_t2 = new javax.swing.JTextField();
        btn_genM1 = new javax.swing.JButton();
        btn_calc1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txa_proceso1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        pnl_matriz2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTabbedPane1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N

        txt_n1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        txt_n1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_n1MouseClicked(evt);
            }
        });

        txt_n2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        txt_n2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_n2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel1.setText("x");

        btn_genM.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btn_genM.setText("Generar");
        btn_genM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_genMActionPerformed(evt);
            }
        });

        pnl_matriz.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(pnl_matriz);

        btn_calc.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btn_calc.setText("Calcular");
        btn_calc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcActionPerformed(evt);
            }
        });

        txa_proceso.setEditable(false);
        txa_proceso.setColumns(20);
        txa_proceso.setLineWrap(true);
        txa_proceso.setRows(5);
        jScrollPane2.setViewportView(txa_proceso);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Minimización");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Maximización");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txt_n1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_n2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(btn_genM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(btn_calc, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jRadioButton1)
                        .addGap(28, 28, 28)
                        .addComponent(jRadioButton2)))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_genM, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txt_n2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_n1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btn_calc)
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2))))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Húngaro ", jPanel1);

        txt_t1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        txt_t1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_t1MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel3.setText("x");

        txt_t2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        txt_t2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_t2ActionPerformed(evt);
            }
        });

        btn_genM1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btn_genM1.setText("Generar");
        btn_genM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_genM1ActionPerformed(evt);
            }
        });

        btn_calc1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btn_calc1.setText("Calcular");
        btn_calc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calc1ActionPerformed(evt);
            }
        });

        txa_proceso1.setEditable(false);
        txa_proceso1.setColumns(20);
        txa_proceso1.setRows(5);
        jScrollPane3.setViewportView(txa_proceso1);

        pnl_matriz2.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane4.setViewportView(pnl_matriz2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(btn_calc1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_t1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_t2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(btn_genM1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(52, 52, 52)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_genM1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txt_t2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_t1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(btn_calc1)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Transporte", jPanel2);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel2.setText("Método de Transporte y Asignación");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(286, 286, 286)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_n2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_n2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_n2ActionPerformed

    private void btn_genMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_genMActionPerformed

        if (!txt_n1.getText().isEmpty() && !txt_n2.getText().isEmpty()) {

            pnl_matriz.removeAll();
            fil = Integer.parseInt(txt_n1.getText());
            col = Integer.parseInt(txt_n2.getText());

            int banderaF = 0;
            int banderaC = 0;
            int difF = 0;
            int difC = 0;
            if (fil != col) {
                //busco el mayor entre filas y columnas
                // esto me sirve para añadir valores ficticios en caso que no sea de nxn
                int mayor = fil;
                if (mayor < col) {
                    System.out.println("asd");
                    mayor = col;

                    banderaF = 1;
                    difF = fil;
                    fil = col;
                    System.out.println(difF);
                } else {
                    banderaC = 1;
                    difC = col;
                    col = fil;

                }

            }
            matriz = new JTextField[fil][col];
            for (int i = 0; i < fil; i++) {
                for (int k = 0; k < col; k++) {

                    JCTextField j = new JCTextField();
                    //j.setName("a" + (i + 1) + (k + 1));

                    matriz[i][k] = j;
                    j.setPlaceholder("0");
                    pnl_matriz.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            int k = (int) evt.getKeyChar();

                            if ((k >= 48 && k <= 57)||k==45) {
                                if (j.getText().length() == 10) {

                                    evt.consume();
                                    getToolkit().beep();
                                }
                            } else {
                              
                                evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                evt.consume();

                                getToolkit().beep();
                            }
                        }
                    });
                    /**
                     * Con esto sobrescribo el evento click y selecciono todo el
                     * texto de cada textfield
                     */
                    j.addMouseListener(new java.awt.event.MouseAdapter() {
                        @Override
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            j.selectAll();
                        }
                    });
//añado filas ficticias
                    if (banderaF == 1 && (i + 1) > difF) {

                        matriz[i][k].setEditable(false);

                    }
                    //añado columnas ficticias
                    if (banderaC == 1 && (k + 1) > difC) {

                        matriz[i][k].setEditable(false);

                    }
                }

            }
            if (fil == 1 && col == 1) {
                pnl_matriz.setLayout(new GridBagLayout());
                pnl_matriz.updateUI();
                this.pack();

            } else {
                jScrollPane1.setPreferredSize(new Dimension());
                pnl_matriz.setLayout(new GridLayout(fil, col));

                pnl_matriz.updateUI();
                this.pack();
            }
        }
    }//GEN-LAST:event_btn_genMActionPerformed

    private void btn_calcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcActionPerformed
        double[][] mat = new double[fil][col];
        double[][] matCopy = new double[fil][col];
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                if (matriz[i][j].getText().isEmpty()) {
                    matriz[i][j].setText("0");

                }
                mat[i][j] = Double.parseDouble(matriz[i][j].getText());
                matCopy[i][j] = Double.parseDouble(matriz[i][j].getText());
                matriz[i][j].setBackground(Color.white);
            }

        }
        txa_proceso.setText("");
        txa_proceso.setText("PROCEDIMIENTO:\n");
        if (jRadioButton2.isSelected()) {
            double numMax = munkres.buscarMaxMatriz(mat);  //máximo valor de la matriz
            txa_proceso.append("\nEl número máximo de la matriz es: " + numMax + "\nLa valores de matriz restados " + numMax + "\n\n");
            for (int i = 0; i < mat[0].length; i++) {
                for (int j = 0; j < mat.length; j++) {
                    mat[i][j] = -mat[i][j] + numMax;
                    txa_proceso.append("[" + mat[i][j] + "] ");
                    System.out.print(mat[i][j] + " ");
                }
                txa_proceso.append("\n");
                System.out.println("");
            }
            txa_proceso.append("\nAplicamos Húngaro normalmente:\n");
        }

        txa_proceso.append("\n");
        int vec[] = munkres.munkres(matriz.length, mat);
        txa_proceso.append("\nSOLUCIÓN\n");
        for (int i = 0; i < vec.length; i++) {
            System.out.println(vec[i]);
            matriz[i][vec[i]].setBackground(Color.YELLOW);
            txa_proceso.append("Fila " + (i + 1) + " ; Columna " + String.valueOf(vec[i] + 1) + ": " + matCopy[i][vec[i]] + "\n");
        }

        double costo = 0;
        for (int j = 0; j < matCopy.length; j++) {
            costo = costo + matCopy[j][vec[j]];
        }
        txa_proceso.append("\nCOSTO ÓPTIMO: " + String.valueOf(costo) + "\n");


    }//GEN-LAST:event_btn_calcActionPerformed

    private void txt_n1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_n1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_n1MouseClicked

    private void txt_t1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_t1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_t1MouseClicked

    private void txt_t2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_t2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_t2ActionPerformed

    private void btn_genM1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_genM1ActionPerformed
        if (!txt_t1.getText().isEmpty() && !txt_t2.getText().isEmpty()) {

            pnl_matriz2.removeAll();
            fil = Integer.parseInt(txt_t1.getText()) + 1;
            col = Integer.parseInt(txt_t2.getText()) + 1;
            int banderaF = 0;
            int banderaC = 0;
            int difF = 0;
            int difC = 0;

            matrizT = new JTextField[fil][col];

            for (int i = 0; i < fil; i++) {

                for (int k = 0; k < col; k++) {

                    JCTextField j = new JCTextField();
                    //j.setName("a" + (i + 1) + (k + 1));

                    matrizT[i][k] = j;
                    //para pintar la fila de la demannda
                    if (i == fil - 1 && k < col - 1) {
                        matrizT[i][k].setBackground(Color.YELLOW);

                    }
                    //para pintar la columna de la demanda
                    if (k == col - 1 && i < fil - 1) {
                        matrizT[i][k].setBackground(Color.CYAN);

                    }

                    j.setPlaceholder("0");
                    pnl_matriz2.add(j);

                    j.addKeyListener(new java.awt.event.KeyAdapter() {

                        @Override
                        public void keyTyped(java.awt.event.KeyEvent evt) {
                            int k = (int) evt.getKeyChar();

                            if ((k >= 48 && k <= 57)||k==45) {
                                if (j.getText().length() == 10) {

                                    evt.consume();
                                    getToolkit().beep();
                                }
                            } else {

                                evt.setKeyChar((char) KeyEvent.VK_CLEAR);
                                evt.consume();

                                getToolkit().beep();
                            }
                        }
                    });
                    /**
                     * Con esto sobrescribo el evento click y selecciono todo el
                     * texto de cada textfield
                     */
                    j.addMouseListener(new java.awt.event.MouseAdapter() {
                        @Override
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            j.selectAll();
                        }
                    });
//añado filas ficticias

                }

            }
            matrizT[fil - 1][col - 1].setEditable(false);

            if (fil == 1 && col == 1) {
                pnl_matriz2.setLayout(new GridBagLayout());
                pnl_matriz2.updateUI();
                this.pack();

            } else {
                jScrollPane4.setPreferredSize(new Dimension());
                pnl_matriz2.setLayout(new GridLayout(fil, col));

                pnl_matriz2.updateUI();
                this.pack();
            }
        }
    }//GEN-LAST:event_btn_genM1ActionPerformed
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";
    public static final String ANSI_BOLD = "\033[1;0m";
    private void btn_calc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calc1ActionPerformed
        double[][] mat = new double[fil][col];
        double[][] original;
        double[][] matCopy = new double[fil][col];
        double[][] tempora = {{6, 5, 4, 3, 10}, {7, 9, 8, 6, 5}, {3, 5, 6, 9, 15}, {8, 5, 7, 15, 0}};
        oferta = new double[col];
        demanda = new double[fil];
        double of = 0;
        double dem = 0;
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                if (matrizT[i][j].getText().isEmpty()) {
                    matrizT[i][j].setText("0");

                }

                mat[i][j] = Double.parseDouble(matrizT[i][j].getText());
                matCopy[i][j] = Double.parseDouble(matrizT[i][j].getText());
                if (i == fil - 1 && j < col - 1) {

                    dem += mat[i][j];
                }
                //para pintar la columna de la demanda
                if (j == col - 1 && i < fil - 1) {

                    oferta[i] = mat[i][j];
                    of += mat[i][j];
                }
            }

        }
        txa_proceso1.setText("PROCEDIMIENTO\n\n");
        //Resolviendo el primer problema de degeneracion
        double of_dem = of - dem; //calculo la diferencia q hay entre demanda 
        //oferta para generar una nueva matriz con fila o columna ficticia
        if (of_dem < 0) { //aumento una nueva oferta (fila)
            System.out.println("Se tiene degeneración ya que la oferta es menor a la demanda");
            txa_proceso1.append("Se tiene degeneración ya que la oferta es menor a la demanda\n\n");
            original = new double[fil + 1][col];
            for (int i = 0; i < fil + 1; i++) {
                for (int j = 0; j < col; j++) {
                    if (i < fil - 1) {
                        original[i][j] = mat[i][j];
                    }
                    if (i == fil) {
                        original[i][j] = mat[fil - 1][j];

                        original[fil - 1][j] = 0;
                        original[fil - 1][col - 1] = of_dem * -1;
                    }

                }
            }

        } else if (of_dem > 0) {
            //aumento una nueva demanda (columna)

            System.out.println("Se tiene degeneración ya que la demanda es menor a la oferta");
            txa_proceso1.append("Se tiene degeneración ya que la demanda es menor a la oferta\n\n");
            original = new double[fil][col + 1];
            for (int i = 0; i < fil; i++) {
                for (int j = 0; j < col + 1; j++) {
                    if (j < col - 1) {
                        original[i][j] = mat[i][j];
                    }
                    if (j == col) {
                        original[i][j] = mat[i][col - 1];

                        original[i][col - 1] = 0;
                        original[fil - 1][col - 1] = of_dem;
                    }

                }
            }
        } else {
            matrizT[fil - 1][col - 1].setText(String.valueOf(dem));
            mat[fil - 1][col - 1] = dem;

            original = mat;
        }
        int filas = original.length;
        int columnas = original[0].length;
        double esquinaNorte[][] = new double[filas][columnas];
        double valor = 0;
        double esquinaValores[][] = new double[filas][columnas];
        double slash[][] = new double[filas][columnas];
        double paraX[][] = new double[filas][columnas];
        double laX = 0;
        double auxiliar[][] = new double[filas][columnas];
        double delCamino[][] = new double[filas][columnas];
        double transpuesta[][] = new double[columnas][filas];
        String camino[][] = new String[filas][columnas];
        double paraValorX[][] = new double[filas][columnas];
        double finProceso[][] = new double[filas][columnas];
        double auxiliarMasMenos[][] = new double[filas][columnas];
        // <editor-fold defaultstate="collapsed" desc="IMPRESION RANGO DE LA MATRIZ">
        System.out.println("");

        txa_proceso1.append("MATRIZ INICIAL DE COSTOS\n\n");

        System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
        System.out.println(ANSI_BLUE + "////              MATRIZ INICIAL DE COSTOS              ////" + ANSI_BLUE);
        System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
        System.out.println("");
        for (int x = 0; x < original.length; x++) {
            System.out.print("|");

            for (int y = 0; y < original[x].length; y++) {
                txa_proceso1.append("[" + String.valueOf(original[x][y]) + "] ");
                System.out.print(original[x][y]);
                if (y != original[x].length - 1) {

                    System.out.print("\t");
                }
            }
            txa_proceso1.append("\n");

        }
        txa_proceso1.append("\nRANGO DE LA MATRIZ: " + ((filas - 1) + (columnas - 1) - 1) + "\n\n");
        System.out.println("");
        System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
        System.out.println(ANSI_PURPLE + "////                 RANGO DE LA MATRIZ :" + (ANSI_RED + ((filas - 1) + (columnas - 1) - 1) + ANSI_RED) + (ANSI_PURPLE + "              ////" + ANSI_PURPLE));
        System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
        System.out.println("");
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="LLENADO MATRIZ ESQUINA NOR OESTE">
        for (int x = 0; x < esquinaNorte.length - 1; x++) {
            esquinaNorte[x][columnas - 1] = original[x][columnas - 1];
        }

        for (int x = 0; x < 1; x++) {
            for (int y = 0; y < esquinaNorte[x].length - 1; y++) {
                esquinaNorte[esquinaNorte.length - 1][y] = original[original.length - 1][y];
            }
        }

        esquinaNorte[filas - 1][columnas - 1] = dem;
        int a = 0, b = 0, c = 0, d = 0;

        for (int count = 0; count < 30; count++) {

            if (esquinaNorte[a][columnas - 1] < esquinaNorte[filas - 1][b]) {
                esquinaNorte[c][d] = esquinaNorte[a][columnas - 1];
                esquinaNorte[filas - 1][b] = (esquinaNorte[filas - 1][b] - esquinaNorte[a][columnas - 1]); // VALOR X
                esquinaNorte[a][columnas - 1] = (esquinaNorte[a][columnas - 1] - esquinaNorte[a][columnas - 1]); // 0
                c = c + 1;
                a = a + 1;
            } else if ((esquinaNorte[a][columnas - 1] > esquinaNorte[filas - 1][b])) {
                esquinaNorte[c][d] = esquinaNorte[filas - 1][b];
                esquinaNorte[a][columnas - 1] = (esquinaNorte[a][columnas - 1] - esquinaNorte[filas - 1][b]); // VALOR X
                esquinaNorte[filas - 1][b] = (esquinaNorte[filas - 1][b] - esquinaNorte[filas - 1][b]); // 0
                d = d + 1;
                b = b + 1;
            } else if ((esquinaNorte[a][columnas - 1] == esquinaNorte[filas - 1][b]) && (a == filas - 2) && (b == columnas - 2)) {
                esquinaNorte[c][d] = esquinaNorte[filas - 1][b];
                esquinaNorte[a][columnas - 1] = (esquinaNorte[a][columnas - 1] - esquinaNorte[filas - 1][b]); // VALOR X
                esquinaNorte[filas - 1][b] = (esquinaNorte[filas - 1][b] - esquinaNorte[filas - 1][b]);

                break;
            } else if ((esquinaNorte[a][columnas - 1] == esquinaNorte[filas - 1][b]) && (a != filas - 2) && (b != columnas - 2)) {
                esquinaNorte[c][d] = esquinaNorte[a][columnas - 1];
                esquinaNorte[c][d + 1] = -111111;
                esquinaNorte[filas - 1][b] = (esquinaNorte[filas - 1][b] - esquinaNorte[a][columnas - 1]); // VALOR X
                esquinaNorte[a][columnas - 1] = (esquinaNorte[a][columnas - 1] - esquinaNorte[a][columnas - 1]); // 0                 
                a = a + 1;
                b = b + 1;
                c = c + 1;
                d = d + 1;
            }

        }
        for (int i = 0; i < esquinaNorte.length - 1; i++) {
            for (int j = 0; j < esquinaNorte[i].length - 1; j++) {
                if (esquinaNorte[i][j] == 0) {
                    esquinaNorte[i][j] = 999;
                }
            }
        }
        for (int i = 0; i < esquinaNorte.length - 1; i++) {
            for (int j = 0; j < esquinaNorte[i].length - 1; j++) {
                if (esquinaNorte[i][j] == -111111) {
                    esquinaNorte[i][j] = 0;
                }
            }
        }
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="IMPRESION MATRIZ ESQUINA NORTE">
        txa_proceso1.append("MATRIZ DE ESQUINA NORTE\n\n");
        System.out.println("");
        System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
        System.out.println(ANSI_BLUE + "////              MATRIZ DE ESQUINA NORTE               ////" + ANSI_BLUE);
        System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
        System.out.println("");
        for (int x = 0; x < esquinaNorte.length; x++) {
            txa_proceso1.append("|");
            System.out.print("|");
            for (int y = 0; y < esquinaNorte[x].length; y++) {
                txa_proceso1.append(String.valueOf(esquinaNorte[x][y]));
                System.out.print(esquinaNorte[x][y]);
                if (y != esquinaNorte[x].length - 1) {
                    txa_proceso1.append("\t");
                    System.out.print("\t");
                }
            }
            txa_proceso1.append("|\n");
            System.out.println("|");
        }
        System.out.println("");
        // </editor-fold>    
        txa_proceso1.append("\n");
        int contadorGlobal = 0;
        do {

            //<editor-fold defaultstate="collapsed" desc="VALOR DE COSTO" >
            for (int i = 0; i < original.length - 1; i++) {
                for (int j = 0; j < original[i].length - 1; j++) {
                    if (esquinaNorte[i][j] != 999) {
                        valor = valor + (original[i][j] * esquinaNorte[i][j]);
                    }
                }
            }
            txa_proceso1.append("VALOR: " + valor + "\n");
            System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
            System.out.println(ANSI_PURPLE + "////                      VALOR: " + (ANSI_RED + valor + ANSI_RED) + (ANSI_PURPLE + "                    ////" + ANSI_BLUE));
            System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
            System.out.println("");
            valor = 0;
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="MATRIZ ESQUINA COSTOS Y MENOR" >
            for (int i = 0; i < original.length - 1; i++) {
                for (int j = 0; j < original[i].length - 1; j++) {
                    if (esquinaNorte[i][j] != 999) {
                        esquinaValores[i][j] = original[i][j];
                    } else {
                        esquinaValores[i][j] = esquinaNorte[i][j];
                    }
                }
            }

            for (int i = 0; i < columnas - 1; i++) {
                esquinaValores[filas - 1][i] = 888;
            }

            for (int i = 0; i < filas - 1; i++) {
                esquinaValores[i][columnas - 1] = 777;
            }
            esquinaValores[filas - 1][columnas - 1] = 666;

            double paraMenor = 1000;
            for (int x = 0; x < esquinaValores.length - 1; x++) {
                for (int y = 0; y < esquinaValores[x].length - 1; y++) {
                    if (esquinaValores[x][y] < paraMenor) {
                        if (esquinaValores[x][y] > -1) {
                            paraMenor = esquinaValores[x][y];
                        }
                    }
                }
            }

            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="IMPRESION MATRIZ COSTOS">
            txa_proceso1.append("MATRIZ REEMPLAZADOS COSTOS\n\n");
            System.out.println("");
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////             MATRIZ REMPLAZADOS COSTOS              ////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println("");
            for (int x = 0; x < esquinaValores.length - 1; x++) {
                txa_proceso1.append("|");
                System.out.print("|");
                for (int y = 0; y < esquinaValores[x].length - 1; y++) {
                    txa_proceso1.append(String.valueOf(esquinaValores[x][y]));
                    System.out.print(esquinaValores[x][y]);
                    if (y != esquinaValores[x].length) {
                        txa_proceso1.append("\t");
                        System.out.print("\t");
                    }
                }
                txa_proceso1.append("|\n");
                System.out.println("|");
            }
            txa_proceso1.append("\n");
            System.out.println("");
            // </editor-fold>   

            //<editor-fold defaultstate="collapsed" desc="VALORES EXTREMOS DE RESTAS" >
            esquinaValores[0][columnas - 1] = paraMenor;
            for (int i = 0; i < esquinaValores.length - 1; i++) {
                for (int j = 0; j < esquinaValores[i].length - 1; j++) {
                    if (esquinaValores[i][j] != 999) {
                        if ((esquinaValores[i][columnas - 1] == 777) && (esquinaValores[filas - 1][j] == 888)) {
                            esquinaValores[i][columnas - 1] = 777;
                            esquinaValores[filas - 1][j] = 888;
                        } else if (esquinaValores[i][columnas - 1] != 777) {
                            if (esquinaValores[filas - 1][j] == 888) {
                                esquinaValores[filas - 1][j] = esquinaValores[i][j] - esquinaValores[i][columnas - 1];
                            }
                        } else if (esquinaValores[i][columnas - 1] == 777) {
                            if (esquinaValores[filas - 1][j] != 888) {
                                esquinaValores[i][columnas - 1] = esquinaValores[i][j] - esquinaValores[filas - 1][j];
                            }
                        }
                    }

                }
            }
            for (int i = esquinaValores.length - 2; i >= 0; i--) {
                for (int j = esquinaValores[i].length - 2; j >= 0; j--) {
                    if (esquinaValores[i][j] != 999) {
                        if (esquinaValores[i][columnas - 1] != 777) {
                            if (esquinaValores[filas - 1][j] == 888) {
                                esquinaValores[filas - 1][j] = esquinaValores[i][j] - esquinaValores[i][columnas - 1];
                            }
                        } else if (esquinaValores[i][columnas - 1] == 777) {
                            if (esquinaValores[filas - 1][j] != 888) {
                                esquinaValores[i][columnas - 1] = esquinaValores[i][j] - esquinaValores[filas - 1][j];
                            }
                        }
                    }

                }
            }
            for (int i = 0; i < esquinaValores.length - 1; i++) {
                for (int j = 0; j < esquinaValores[i].length - 1; j++) {
                    if (esquinaValores[i][j] != 999) {
                        if ((esquinaValores[i][columnas - 1] == 777) && (esquinaValores[filas - 1][j] == 888)) {
                            esquinaValores[i][columnas - 1] = 777;
                            esquinaValores[filas - 1][j] = 888;
                        } else if (esquinaValores[i][columnas - 1] != 777) {
                            if (esquinaValores[filas - 1][j] == 888) {
                                esquinaValores[filas - 1][j] = esquinaValores[i][j] - esquinaValores[i][columnas - 1];
                            }
                        } else if (esquinaValores[i][columnas - 1] == 777) {
                            if (esquinaValores[filas - 1][j] != 888) {
                                esquinaValores[i][columnas - 1] = esquinaValores[i][j] - esquinaValores[filas - 1][j];
                            }
                        }
                    }

                }
            }

            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="VALORES BAJO EL GUION">
            txa_proceso1.append("VALORES DE LOS EXTREMOS\n\n");
            System.out.println("");
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////                 VALORES DE LOS EXREMOS             ////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println("");
            for (int x = 0; x < esquinaValores.length; x++) {
                txa_proceso1.append("|");
                System.out.print("|");
                for (int y = 0; y < esquinaValores[x].length; y++) {
                    txa_proceso1.append(String.valueOf(esquinaValores[x][y]));
                    System.out.print(esquinaValores[x][y]);
                    if (y != esquinaValores[x].length - 1) {
                        txa_proceso1.append("\t");
                        System.out.print("\t");
                    }
                }
                txa_proceso1.append("|\n");
                System.out.println("|");
            }
            txa_proceso1.append("\n");
            System.out.println("");
            // </editor-fold>   

            //<editor-fold defaultstate="collapsed" desc="MATRIZ PARA X CON MAYOR" >
            for (int i = 0; i < esquinaValores.length - 1; i++) {
                for (int j = 0; j < esquinaValores[i].length - 1; j++) {
                    if (esquinaValores[i][j] == 999) {
                        slash[i][j] = original[i][j];
                    } else {
                        slash[i][j] = 999;
                    }
                }
            }

            for (int x = 0; x < slash.length - 1; x++) {
                slash[x][columnas - 1] = esquinaValores[x][columnas - 1];
            }

            for (int x = 0; x < 1; x++) {
                for (int y = 0; y < slash[x].length - 1; y++) {
                    slash[filas - 1][y] = esquinaValores[filas - 1][y];
                }
            }

            for (int i = 0; i < slash.length; i++) {
                for (int j = 0; j < slash[i].length; j++) {
                    paraX[i][j] = 999;
                }
            }
            for (int i = 0; i < slash.length - 1; i++) {
                for (int j = 0; j < slash[i].length - 1; j++) {
                    paraX[i][j] = 999;
                    if (slash[i][j] != 999) {
                        paraX[i][j] = (slash[filas - 1][j] + slash[i][columnas - 1]) - slash[i][j];
                    }
                }
            }
            // BUSCA MAYOR DE LA MATRIZ
            int dimFilas = 0;
            int dimColumnas = 0;
            double aux2 = -1;
            int contMayor = 0;
            for (int x = 0; x < paraX.length - 1; x++) {
                for (int y = 0; y < paraX[x].length - 1; y++) {
                    if ((paraX[x][y] > aux2) && (paraX[x][y] != 999)) {
                        if (paraX[x][y] > -1) {
                            aux2 = paraX[x][y];
                            laX = paraX[x][y];
                            dimFilas = x;
                            dimColumnas = y;
                        }
                    }
                }
            }
            double valorX = laX;

            // LLENO MATRIZ AUXILIAR DE CEROS
            for (int i = 0; i < auxiliar.length; i++) {
                for (int j = 0; j < auxiliar[i].length; j++) {
                    auxiliar[i][j] = -1;
                }
            }

            // VALORES DE COSTO EN LA AUXILIAR SI HAY MAS DE 2
            for (int x = 0; x < paraX.length - 1; x++) {
                for (int y = 0; y < paraX[x].length - 1; y++) {
                    if (paraX[x][y] == aux2) {
                        contMayor = contMayor + 1;
                        auxiliar[x][y] = original[x][y];
                    }
                }
            }

            // CORDENADAS DEL MENOR COSTO SI HAY MAS DE 2
            double menorCostosSiHay2 = 1000;
            if (contMayor >= 2) {
                for (int x = 0; x < auxiliar.length - 1; x++) {
                    for (int y = 0; y < auxiliar[x].length - 1; y++) {
                        if ((auxiliar[x][y] != -1) && (auxiliar[x][y] < menorCostosSiHay2)) {
                            menorCostosSiHay2 = auxiliar[x][y];
                            dimFilas = x;
                            dimColumnas = y;
                        }
                    }
                }
                laX = paraX[dimFilas][dimColumnas];
            }
            // </editor-fold> 

            // <editor-fold defaultstate="collapsed" desc="IMPRESION MATRIZ COSTOS REDUCIDOS">
            txa_proceso1.append("MATRIZ DE COSTOS REDUCIDOS (BAJO GUION)\n\n");
            System.out.println("");
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////       MATRIZ COSTOS REDUCIDOS (BAJO GUION)         ////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println("");
            for (int x = 0; x < paraX.length - 1; x++) {
                txa_proceso1.append("|");
                System.out.print("|");
                for (int y = 0; y < paraX[x].length - 1; y++) {
                    txa_proceso1.append(String.valueOf(paraX[x][y]));
                    System.out.print(paraX[x][y]);
                    if (y != paraX[x].length - 1) {
                        txa_proceso1.append("\t");
                        System.out.print("\t");
                    }
                }
                txa_proceso1.append("|\n");
                System.out.println("|");
            }
            txa_proceso1.append("\n");
            System.out.println("");
            // </editor-fold>   

            //<editor-fold defaultstate="collapsed" desc="AQUI FINALIZO ESTA WEA" >
            if (aux2 <= 0) {
                for (int i = 0; i < original.length - 1; i++) {
                    for (int j = 0; j < original[i].length - 1; j++) {
                        if (esquinaNorte[i][j] != 999) {
                            valor = valor + (original[i][j] * esquinaNorte[i][j]);
                        }
                    }
                }
                txa_proceso1.append("YA NO HAY VALORES POSITIVOS EN LA TABLA DE COSTOS REDUCIDOS\nVALOR ÓPTIMO: " + valor);
                System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
                System.out.println(ANSI_PURPLE + "////                                                    ////" + ANSI_PURPLE);
                System.out.println(ANSI_PURPLE + "////             YA NO HAY  VALORES POSITIVOS           ////" + ANSI_PURPLE);
                System.out.println(ANSI_PURPLE + "////           EN LA TABLA DE COSTOS REDUCIDOS          ////" + ANSI_PURPLE);
                System.out.println(ANSI_PURPLE + "////                                                    ////" + ANSI_PURPLE);
                System.out.println(ANSI_PURPLE + "////                OPTIMO VALOR: " + (ANSI_RED + valor + ANSI_RED) + (ANSI_PURPLE + "                   ////" + ANSI_BLUE));
                System.out.println(ANSI_PURPLE + "////                                                    ////" + ANSI_PURPLE);
                System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
                System.out.println("");
                break;
            }
            //</editor-fold>

            // <editor-fold defaultstate="collapsed" desc="IMPRESION DE LA POSICION DE EQUIZ">
            txa_proceso1.append("LA X SE UBICARÁ EN LA POSICIÓN: [" + (dimFilas + 1) + "] [" + (dimColumnas + 1) + "]\n\n");
            System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
            System.out.println(ANSI_PURPLE + "////       LA X SE UBICARA EN LA POSICION: [" + (ANSI_RED + (dimFilas + 1) + ANSI_RED) + (ANSI_RED + "] [" + ANSI_RED) + (ANSI_RED + (dimColumnas + 1) + ANSI_RED) + (ANSI_RED + "]" + ANSI_RED) + (ANSI_PURPLE + "      ////" + ANSI_BLUE));
            System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
            System.out.println("");
            // </editor-fold>

            // <editor-fold defaultstate="collapsed" desc="LLENADO MATRIZ DEL CAMINO">
            for (int i = 0; i < delCamino.length; i++) {
                for (int j = 0; j < delCamino[i].length; j++) {
                    delCamino[i][j] = esquinaNorte[i][j];
                }
            }
            for (int i = 0; i < filas; i++) {
                delCamino[i][columnas - 1] = 999;
            }
            for (int i = 0; i < columnas; i++) {
                delCamino[filas - 1][i] = 999;
            }
            delCamino[filas - 1][columnas - 1] = 999;
            delCamino[dimFilas][dimColumnas] = laX;
            // </editor-fold>

            // <editor-fold defaultstate="collapsed" desc="IMPRESION MATRIZ DEL CAMINO">
//            System.out.println("");
//            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
//            System.out.println(ANSI_BLUE + "////     MATRIZ CAMINO SIN EL PROCESO DE FILAS Y COL    ////" + ANSI_BLUE);
//            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
//            System.out.println("");
//            for (int x = 0; x < delCamino.length - 1; x++) {
//                System.out.print("|");
//                for (int y = 0; y < delCamino[x].length - 1; y++) {
//                    System.out.print(delCamino[x][y]);
//                    if (y != delCamino[x].length - 1) {
//                        System.out.print("\t");
//                    }
//                }
//                System.out.println("|");
//            }
//            System.out.println("");
            // </editor-fold> 
            // <editor-fold defaultstate="collapsed" desc="METODO TRANSPUESTA PARA CAMINO">
            int contadorMetodo = 0;
            do {

                // ELIMNACION DE VALORES SOLOS POR FILAS
                int elemento = 0;
                for (int i = 0; i < delCamino.length; i++) {
                    for (int j = 0; j < delCamino[i].length; j++) {
                        if (delCamino[i][j] != 999) {
                            elemento = elemento + 1;
                        }
                    }
                    if (elemento == 1) {
                        for (int j = 0; j < delCamino[i].length; j++) {
                            if (delCamino[i][j] != 999) {
                                delCamino[i][j] = 999;
                            }
                        }
                    }
                    elemento = 0;
                }

                // ELIMINACION FILAS DE TRANSPUESTA
                for (int x = 0; x < delCamino.length; x++) {
                    for (int y = 0; y < delCamino[x].length; y++) {
                        transpuesta[y][x] = delCamino[x][y];
                    }
                }

                int elemento1 = 0;
                for (int i = 0; i < transpuesta.length; i++) {
                    for (int j = 0; j < transpuesta[i].length; j++) {
                        if (transpuesta[i][j] != 999) {
                            elemento1 = elemento1 + 1;
                        }
                    }
                    if (elemento1 == 1) {
                        for (int j = 0; j < transpuesta[i].length; j++) {
                            if (transpuesta[i][j] != 999) {
                                transpuesta[i][j] = 999;
                            }
                        }
                    }
                    elemento1 = 0;
                }
                for (int x = 0; x < transpuesta.length; x++) {
                    for (int y = 0; y < transpuesta[x].length; y++) {
                        delCamino[y][x] = transpuesta[x][y];
                    }
                }
                contadorMetodo = contadorMetodo + 1;

            } while (contadorMetodo < 20);

            // </editor-fold>
            // <editor-fold defaultstate="collapsed" desc="MATRIZ STRING PARA MOSTRAR X">
            for (int i = 0; i < camino.length; i++) {
                for (int j = 0; j < camino[i].length; j++) {
                    camino[i][j] = String.valueOf(delCamino[i][j]);
                }
            }
            camino[dimFilas][dimColumnas] = "X";
            // </editor-fold> 

            // <editor-fold defaultstate="collapsed" desc="IMPRESION MATRIZ DEL CAMINO">
            txa_proceso1.append("MATRIZ DEL CAMINO CIRCULAR\n\n");
            System.out.println("");
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////           MATRIZ DEL CAMINO CIRCULAR               ////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println("");
            for (int x = 0; x < camino.length - 1; x++) {
                txa_proceso1.append("|");
                System.out.print("|");
                for (int y = 0; y < camino[x].length - 1; y++) {
                    txa_proceso1.append(String.valueOf(camino[x][y]));
                    System.out.print(camino[x][y]);
                    if (y != camino[x].length - 1) {
                        txa_proceso1.append("\t");
                        System.out.print("\t");
                    }
                }
                txa_proceso1.append("|\n");
                System.out.println("|");
            }
            txa_proceso1.append("\n");
            System.out.println("");
            // </editor-fold> 

            // <editor-fold defaultstate="collapsed" desc="CONTEO DE MATRIZ DEL CAMINO">
            int contadorDelCamino = 0;
            int casoConteo = 0;
            for (int i = 0; i < delCamino.length - 1; i++) {
                for (int j = 0; j < delCamino[i].length - 1; j++) {
                    if (delCamino[i][j] != 999) {
                        contadorDelCamino = contadorDelCamino + 1;
                    }
                }
            }
            switch (contadorDelCamino) {
                case 4:
                    casoConteo = 2;
                    break;
                case 6:
                    casoConteo = 4;
                    break;
                case 8:
                    casoConteo = 6;
                    break;
                case 10:
                    casoConteo = 8;
                    break;
                default:
                    break;
            }
            // </editor-fold>

            // <editor-fold defaultstate="collapsed" desc="-1 EN LA MATRIZ PARA VALOR DE X">
            for (int i = 0; i < paraValorX.length; i++) {
                for (int j = 0; j < paraValorX[i].length; j++) {
                    paraValorX[i][j] = -1;
                }
            }
            // </editor-fold> 

            // <editor-fold defaultstate="collapsed" desc="LLENAMOS LA MATRIZ DE -1 CON VALORES PARA X Y SELECCIONAMOS EL MENOR">
            int auxfilX = dimFilas;
            int auxcolX = dimColumnas;
            int contadorMasMenosX = 0;

            // lleno la matriz auxiliar
            for (int i = 0; i < auxiliarMasMenos.length; i++) {
                for (int j = 0; j < auxiliarMasMenos[i].length; j++) {
                    auxiliarMasMenos[i][j] = 0;
                }
            }
            auxiliarMasMenos[dimFilas][dimColumnas] = 888;

            switch (contadorDelCamino) {
                case 4:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 4">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i != auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                paraValorX[i][j] = delCamino[i][j];
                                auxiliarMasMenos[i][j] = 888;
                            }
                        }
                    }
                    // </editor-fold> 
                    break;
                case 6:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 6">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }

                    // </editor-fold> 
                    break;
                case 8:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 8">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }

                    // </editor-fold> 
                    break;
                case 10:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 10">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }

                    // </editor-fold> 
                    break;
                case 12:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 12">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }

                    // </editor-fold> 
                    break;
                case 14:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 14">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfilX) && (j != auxcolX) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                auxiliarMasMenos[i][j] = 888;
                                auxcolX = j;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfilX) && (delCamino[i][auxcolX] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            paraValorX[i][auxcolX] = delCamino[i][auxcolX];
                            auxiliarMasMenos[i][auxcolX] = 888;
                            auxfilX = i;
                        }
                    }

                    // </editor-fold> 
                    break;
            }
            //</editor-fold>

            // <editor-fold defaultstate="collapsed" desc="BUSCO MENOR DE LOS QUE RESTABA">
            double paraMenorX = 100000;
            int posCeroFil = 0;
            int posCeroCol = 0;
            for (int x = 0; x < paraValorX.length - 1; x++) {
                for (int y = 0; y < paraValorX[x].length - 1; y++) {
                    if (paraValorX[x][y] < paraMenorX) {
                        if (paraValorX[x][y] > -1) {
                            paraMenorX = paraValorX[x][y];
                            posCeroFil = x;
                            posCeroCol = y;
                        }
                    }
                }
            }
            // </editor-fold>

            // <editor-fold defaultstate="collapsed" desc="IMPRESION DEL VALOR DE EQUIZ">
            txa_proceso1.append("LA X SE TOMA EL VALOR DE: " + paraMenorX + "\n");
            System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
            System.out.println(ANSI_PURPLE + "////          LA X SE TOMA EL VALOR DE: " + (ANSI_RED + paraMenorX + ANSI_RED) + (ANSI_PURPLE + "               ////" + ANSI_PURPLE));
            System.out.println(ANSI_PURPLE + "////////////////////////////////////////////////////////////" + ANSI_PURPLE);
            // </editor-fold>

            // <editor-fold defaultstate="collapsed" desc="PONEMOS MAS Y MENOS EN LA MATRIZ">
            delCamino[dimFilas][dimColumnas] = paraMenorX;
            int auxfil = dimFilas;
            int auxcol = dimColumnas;
            int contadorMasMenos = 0;

            // lleno la matriz auxiliar
            for (int i = 0; i < auxiliarMasMenos.length; i++) {
                for (int j = 0; j < auxiliarMasMenos[i].length; j++) {
                    auxiliarMasMenos[i][j] = 0;
                }
            }
            auxiliarMasMenos[dimFilas][dimColumnas] = 888;

            switch (contadorDelCamino) {
                case 4:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 4">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i != auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                            }
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcolX] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] - paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                            }
                        }
                    }
                    // </editor-fold> 
                    break;
                case 6:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 6">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    // </editor-fold> 
                    break;
                case 8:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 8">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    // </editor-fold> 
                    break;
                case 10:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 10">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    // </editor-fold> 
                    break;
                case 12:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 12">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    // </editor-fold> 
                    break;
                case 14:
                    // <editor-fold defaultstate="collapsed" desc="PROCESO CUANDO SOLO HAY 14">
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    for (int i = 0; i < delCamino.length - 1; i++) {
                        for (int j = 0; j < delCamino[i].length - 1; j++) {
                            if ((i == auxfil) && (j != auxcol) && (delCamino[i][j] != 999) && (auxiliarMasMenos[i][j] != 888)) {
                                delCamino[i][j] = delCamino[i][j] + paraMenorX;
                                auxiliarMasMenos[i][j] = 888;
                                auxcol = j;
                            }
                        }
                    }

                    for (int i = 0; i < delCamino.length - 1; i++) {
                        if ((i != auxfil) && (delCamino[i][auxcol] != 999) && (auxiliarMasMenos[i][auxcol] != 888)) {
                            delCamino[i][auxcol] = delCamino[i][auxcol] - paraMenorX;
                            auxiliarMasMenos[i][auxcol] = 888;
                            auxfil = i;
                        }
                    }
                    // </editor-fold> 
                    break;
                default:
                    txa_proceso1.append("Muchos números en la matriz del camino\n");
                    System.out.println("Muchos numero en la matriz del camino");
                    System.exit(0);
                    break;
            }

            // <editor-fold defaultstate="collapsed" desc="IMPRESION MATRIZ DEL CAMINO">
            txa_proceso1.append("MATRIZ RESUELTA DEL CAMINO\n");
            System.out.println("");
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////           MATRIZ RESUELTA DEL CAMINO               ////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println("");
            for (int x = 0; x < delCamino.length - 1; x++) {
                txa_proceso1.append("|");
                System.out.print("|");
                for (int y = 0; y < delCamino[x].length - 1; y++) {
                    txa_proceso1.append(String.valueOf(delCamino[x][y]));
                    System.out.print(delCamino[x][y]);
                    if (y != delCamino[x].length - 1) {
                        txa_proceso1.append("\t");
                        System.out.print("\t");
                    }
                }
                txa_proceso1.append("|\n");
                System.out.println("|");
            }
            txa_proceso1.append("\n");
            System.out.println("");
            // </editor-fold> 

            // </editor-fold>
            // <editor-fold defaultstate="collapsed" desc="MATRIZ A CICLO">
            for (int i = 0; i < finProceso.length; i++) {
                for (int j = 0; j < finProceso[i].length; j++) {
                    finProceso[i][j] = delCamino[i][j];
                }
            }

            for (int i = 0; i < finProceso.length; i++) {
                for (int j = 0; j < finProceso[i].length; j++) {
                    if (finProceso[i][j] == 999) {
                        finProceso[i][j] = esquinaNorte[i][j];
                    }
                }
            }
            // </editor-fold>
            txa_proceso1.append("MATRIZ TERMINADA\n\n");
            // <editor-fold defaultstate="collapsed" desc="IMPRESION MATRIZ TERMINADA">
            System.out.println("");
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////                MATRIZ TERMINADA                    ////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println("");
            for (int x = 0; x < finProceso.length - 1; x++) {
                txa_proceso1.append("|");
                System.out.print("|");
                for (int y = 0; y < finProceso[x].length - 1; y++) {
                    txa_proceso1.append(String.valueOf(finProceso[x][y]));
                    System.out.print(finProceso[x][y]);
                    if (y != finProceso[x].length - 1) {
                        txa_proceso1.append("\t");
                        System.out.print("\t");
                    }
                }
                txa_proceso1.append("|\n");
                System.out.println("|");
            }
            txa_proceso1.append("\n");
            System.out.println("");
            // </editor-fold> 

            // <editor-fold defaultstate="collapsed" desc="CONTEO PARA QUE COINCIDA CON DIMENSION">
            int contadorDimension = 0;
            int rango = ((filas - 1) + (columnas - 1) - 1);
            for (int i = 0; i < finProceso.length - 1; i++) {
                for (int j = 0; j < finProceso[i].length - 1; j++) {
                    if (finProceso[i][j] != 999) {
                        contadorDimension = contadorDimension + 1;
                    }
                }
            }

            int contadorCerosCambiados = 0;
            if (contadorDimension > rango) {
                finProceso[posCeroFil][posCeroCol] = 999;
            }

            // </editor-fold>
            // <editor-fold defaultstate="collapsed" desc="IMPRESION MATRIZ TERMINADA">
            txa_proceso1.append("IMPRESIÓN YA CON MISMO RANGO\n\n");
            System.out.println("");
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////          IMPRESION YA CON MISMO RANGO              ////" + ANSI_BLUE);
            System.out.println(ANSI_BLUE + "////////////////////////////////////////////////////////////" + ANSI_BLUE);
            System.out.println("");
            for (int x = 0; x < finProceso.length - 1; x++) {
                txa_proceso1.append("|");
                System.out.print("|");
                for (int y = 0; y < finProceso[x].length - 1; y++) {
                    txa_proceso1.append(String.valueOf(finProceso[x][y]));
                    System.out.print(finProceso[x][y]);
                    if (y != finProceso[x].length - 1) {
                        txa_proceso1.append("\t");
                        System.out.print("\t");
                    }
                }
                txa_proceso1.append("|\n");
                System.out.println("|");
            }
            txa_proceso1.append("\n");
            System.out.println("");
            // </editor-fold> 

            // <editor-fold defaultstate="collapsed" desc="CREO LA MATRIZ DE ESQUINA NORTE">
            for (int i = 0; i < esquinaNorte.length; i++) {
                for (int j = 0; j < esquinaNorte[i].length; j++) {
                    esquinaNorte[i][j] = finProceso[i][j];
                }
            }
            contadorGlobal = contadorGlobal + 1;

            // </editor-fold> 
        } while (contadorGlobal < 30);

    }//GEN-LAST:event_btn_calc1ActionPerformed
    public static void impVec(double vec[]) {

        for (int i = 0; i < vec.length; i++) {

            System.out.println(vec[i] + " ");
        }

    }

    public static void impMatriz(double matrix[][]) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println("");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_calc;
    private javax.swing.JButton btn_calc1;
    private javax.swing.JButton btn_genM;
    private javax.swing.JButton btn_genM1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnl_matriz;
    private javax.swing.JPanel pnl_matriz2;
    public static javax.swing.JTextArea txa_proceso;
    public static javax.swing.JTextArea txa_proceso1;
    private javax.swing.JTextField txt_n1;
    private javax.swing.JTextField txt_n2;
    private javax.swing.JTextField txt_t1;
    private javax.swing.JTextField txt_t2;
    // End of variables declaration//GEN-END:variables
}
